in artificial intelligence strips (stanford research institute problem solver) is an automated planner developed by richard fikes and nils nilsson in 1971 at sri international the same name was later used to refer to the formal language of the inputs to this planner this language is the base for most of the languages for expressing automated planning problem instances in use today such languages are commonly known as action languages this article only describes the language not the planner
== definition ==
a strips instance is composed of
an initial state
the specification of the goal states situations which the planner is trying to reach
a set of actions for each action the following are included
preconditions (what must be established before the action is performed)
postconditions (what is established after the action is performed)
mathematically a strips instance is a quadruple  in which each component has the following meaning
is a set of conditions (i.e. propositional variables)
is a set of operators (i.e. actions) each operator is itself a quadruple  each element being a set of conditions these four sets specify in order which conditions must be true for the action to be executable which ones must be false which ones are made true by the action and which ones are made false
is the initial state given as the set of conditions that are initially true (all others are assumed false)
is the specification of the goal state this is given as a pair  which specify which conditions are true and false respectively in order for a state to be considered a goal state
a plan for such a planning instance is a sequence of operators that can be executed from the initial state and that leads to a goal state
formally a state is a set of conditions a state is represented by the set of conditions that are true in it transitions between states are modeled by a transition function which is a function mapping states into new states that result from the execution of actions since states are represented by sets of conditions the transition function relative to the strips instance is a function
where is the set of all subsets of  and is therefore the set of all possible states
the transition function for a state  can be defined as follows using the simplifying assumption that actions can always be executed but have no effect if their preconditions are not met
the function can be extended to sequences of actions by the following recursive equations
a plan for a strips instance is a sequence of actions such that the state that results from executing the actions in order from the initial state satisfies the goal conditions formally is a plan for if satisfies the following two conditions
== extensions ==
the above language is actually the propositional version of strips in practice conditions are often about objects for example that the position of a robot can be modeled by a predicate  and means that the robot is in room1 in this case actions can have free variables which are implicitly existentially quantified in other words an action represents all possible propositional actions that can be obtained by replacing each free variable with a value
the initial state is considered fully known in the language described above conditions that are not in are all assumed false this is often a limiting assumption as there are natural examples of planning problems in which the initial state is not fully known extensions of strips have been developed to deal with partially known initial states
== a sample strips problem ==
a monkey is at location a in a lab there is a box in location c the monkey wants the bananas that are hanging from the ceiling in location b but it needs to move the box and climb onto it in order to reach them
initial state at(a) level(low) boxat(c) bananasat(b)
goal state have(bananas)
actions
// move from x to y
_move(x y)_
preconditions at(x) level(low)
postconditions not at(x) at(y)
// climb up on the box
_climbup(location)_
preconditions at(location) boxat(location) level(low)
postconditions level(high) not level(low)
// climb down from the box
_climbdown(location)_
preconditions at(location) boxat(location) level(high)
postconditions level(low) not level(high)
// move monkey and box from x to y
_movebox(x y)_
preconditions at(x) boxat(x) level(low)
postconditions boxat(y) not boxat(x) at(y) not at(x)
// take the bananas
_takebananas(location)_
preconditions at(location) bananasat(location) level(high)
postconditions have(bananas)
== complexity ==
deciding whether any plan exists for a propositional strips instance is pspace-complete various restrictions can be enforced in order to decide if a plan exists in polynomial time or at least make it an np-complete problem
== see also ==
automated planning
hierarchical task network
planning domain definition language (pddl)
action description language (adl)
sussman anomaly
== references ==
== further reading ==
c bckstrm and b nebel (1995) complexity results for sas+ planning computational intelligence 11:625-656
t bylander (1991) complexity results for planning in proceedings of the twelfth international joint conference on artificial intelligence (ijcai'91) pages 274-279
russell stuart j. norvig peter (2003) artificial intelligence a modern approach (2nd ed.) upper saddle river new jersey prentice hall isbn 0-13-790395-2
